
import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import Header from '../components/Header';
import { getPitchById } from '../lib/firebase'; // Function to fetch data

const GeneratedPitch = () => {
  const { id } = useParams(); // Get the pitch ID from the URL
  const navigate = useNavigate();
  
  const [pitchData, setPitchData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  // Helper function to format date
  const formatDate = (isoString) => {
    if (!isoString) return "N/A";
    return new Date(isoString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  // ----------------------------------------------------------------------
  // 1. Data Fetching Logic
  // ----------------------------------------------------------------------
  useEffect(() => {
    const fetchPitch = async () => {
      if (!id) {
        setError("Invalid Pitch ID.");
        setLoading(false);
        return;
      }
      try {
        const data = await getPitchById(id);
        if (data) {
          setPitchData(data);
        } else {
          setError("Pitch not found.");
        }
      } catch (err) {
        setError(err.message || "Failed to load pitch.");
      } finally {
        setLoading(false);
      }
    };
    fetchPitch();
  }, [id]); // Dependency on ID

  // Helper function to render pitch sections
  const renderSection = (title, content, color) => (
    <div className="p-6 rounded-2xl shadow-xl bg-gray-800 border border-gray-700 transition duration-300 hover:border-indigo-600" style={{borderColor: color}}>
      <h2 className="text-xl font-bold mb-4 flex items-center text-transparent bg-clip-text bg-gradient-to-r from-indigo-300 to-purple-300">
            {/* Using dynamic color for the small indicator dot */}
            <span className={`h-3 w-3 rounded-full mr-3`} style={{ backgroundColor: color }}></span>
            {title}
        </h2>
      <div className="text-gray-300 whitespace-pre-wrap leading-relaxed border-t border-gray-700 pt-4">
            {content}
        </div>
    </div>
  );

  // ----------------------------------------------------------------------
  // 2. Export Logic (Handle Print/PDF)
  // ----------------------------------------------------------------------
  const handleExport = () => {
    if (!pitchData) return; // Prevent export if data isn't loaded
    
    // 1. Create a print-friendly window
    const printWindow = window.open('', '', 'height=600,width=800');
    
    // 2. Format the content for printing
    const printContent = `
      <style>
        body { font-family: Arial, sans-serif; padding: 20px; line-height: 1.6; background-color: #f7f7f7; }
        h1 { color: #4F46E5; border-bottom: 2px solid #E0E0E0; padding-bottom: 10px; }
        h2 { color: #1F2937; margin-top: 30px; border-left: 5px solid #4F46E5; padding-left: 10px; }
        p { margin-bottom: 15px; white-space: pre-wrap; }
        .tagline { color: #34D399; font-style: italic; font-size: 1.2em; }
      </style>
      
      <h1>PitchCraft: ${pitchData.pitchName}</h1>
      <p class="tagline">"${pitchData.tagline}"</p>
      
      <h2>üöÄ Elevator Pitch</h2>
      <p>${pitchData.pitch}</p>
      
      <h2>üî• Problem Statement</h2>
      <p>${pitchData.problemStatement}</p>
      
      <h2>üí° Solution Statement</h2>
      <p>${pitchData.solutionStatement}</p>
      
      <h2>üéØ Target Audience Persona</h2>
      <p>${pitchData.targetAudience}</p>
      
      <h2>üíª Website Hero Section Copy</h2>
      <p>${pitchData.landingCopy}</p>
      
     <p style="margin-top: 40px; font-size: 0.8em; color: #9CA3AF;">
        Generated by PitchCraft AI on ${formatDate(pitchData.createdAt)}
      </p>
    `;

    // 3. Write and print
    printWindow.document.write(printContent);
    printWindow.document.close();
    printWindow.print();
  };

  // ----------------------------------------------------------------------
  // 3. Conditional Rendering (Loading/Error/Success)
  // ----------------------------------------------------------------------
  if (loading) return (
    <div className="min-h-screen bg-gray-900 flex items-center justify-center">
      <p className="text-indigo-400 text-xl font-medium flex items-center space-x-2">
        <svg className="animate-spin h-6 w-6" viewBox="0 0 24 24"><circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle><path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>
        <span>Loading pitch data... ‚è≥</span>
      </p>
    </div>
  );
  if (error) return (
    <div className="min-h-screen bg-gray-900 pt-20 text-center">
      <p className="text-red-400 text-lg font-medium p-4 bg-gray-800 inline-block rounded-lg border border-red-700">{error}</p>
      <button onClick={() => navigate('/dashboard')} className="mt-4 text-indigo-400 hover:underline">
        Go to Dashboard
      </button>
    </div>
  );

  // ----------------------------------------------------------------------
  // 4. Main Display JSX
  // ----------------------------------------------------------------------
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 to-black font-sans">
      <Header />
      
      <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-10">
        <div className="text-center mb-10 p-6 rounded-xl bg-gray-800/70 border border-indigo-700 shadow-2xl">
          <span className="inline-flex items-center px-4 py-1 rounded-full text-sm font-semibold bg-indigo-900/60 text-indigo-300 border border-indigo-500 shadow-md">
            {pitchData.industry} | {pitchData.tone} Tone
          </span>
          <h1 className="text-5xl font-extrabold text-white mt-4 tracking-tight">
            {pitchData.pitchName}
          </h1>
          <p className="text-xl text-purple-400 mt-3 font-medium italic">
            "{pitchData.tagline}"
          </p>
        </div>

        <div className="space-y-6">
          {renderSection("üöÄ Elevator Pitch (Investor Summary)", pitchData.pitch, '#4F46E5')} 
          
         <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            {renderSection("üî• Problem Statement", pitchData.problemStatement, '#F87171')}
            {renderSection("üí° Solution Statement", pitchData.solutionStatement, '#34D399')}
          </div>
          
          {renderSection("üéØ Target Audience Persona", pitchData.targetAudience, '#FBBF24')}
        </div>
        
        {/* Action Buttons */}
        <div className="mt-12 flex justify-center space-x-6">
            <button 
              onClick={handleExport}
              className="px-8 py-3 border border-transparent rounded-xl text-base font-semibold text-white bg-gradient-to-r from-red-600 to-pink-600 hover:from-red-700 hover:to-pink-700 shadow-lg shadow-red-900/50 transition duration-300 transform hover:scale-[1.02]"
            >
                Export (Print/PDF) üñ®Ô∏è
            </button>
            <button 
              onClick={() => navigate('/dashboard')} 
              className="px-8 py-3 border border-gray-700 rounded-xl text-base font-medium text-gray-300 hover:bg-gray-700 hover:border-indigo-600 transition duration-300"
            >
                Go to Dashboard
            </button>
        </div>
      </main>
    </div>
  );
};

export default GeneratedPitch;